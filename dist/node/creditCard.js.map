{"version":3,"sources":["../../src/creditCard.js"],"names":[],"mappings":";;;;;;;;;;;;8BAA2B,kBAAkB;;;;2BAC5B,gBAAgB;;;;IAEZ,UAAU;AAClB,WADQ,UAAU,GACf;0BADK,UAAU;;AAE3B,QAAI,CAAC,cAAc,GAAG,iCAAoB,CAAC;AAC3C,QAAI,CAAC,IAAI,GAAG,8BAAU,CAAC;GACxB;;eAJkB,UAAU;;WAMZ,6BAAG;AAClB,aAAO,IAAI,CAAC,cAAc,CAAC,iBAAiB,EAAE,CAAC;KAChD;;;WAEO,kBAAC,MAAM,EAAE;AACf,aAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;KACnC;;;WAEwB,mCAAC,MAAM,EAAE;AAChC,UAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EACxB,OAAO,KAAK,CAAC;;AAEf,UAAI,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;;AAEhD,WAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,gBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAChD,YAAI,UAAU,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;AACrC,YAAI,KAAK,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;;AAE9C,YAAI,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,EACpB,OAAO,UAAU,CAAC,IAAI,CAAC;OAC1B;;AAED,aAAO,KAAK,CAAC;KACd;;;WAEiB,4BAAC,MAAM,EAAE,IAAI,EAAE;AAC/B,UAAI,KAAK,GAAG,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC;AACnD,UAAI,YAAY,YAAA,CAAC;;AAEjB,kBAAY,GAAG,AAAC,KAAK,KAAK,MAAM,GAAI,CAAC,GAAG,CAAC,CAAC;AAC1C,UAAI,KAAK,GAAG,IAAI,MAAM,YAAU,YAAY,OAAI,CAAC;;AAEjD,UAAI,IAAI,CAAC,MAAM,KAAK,YAAY,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAClD,OAAO,IAAI,CAAC;;AAEd,aAAO,KAAK,CAAC;KACd;;;WAEiB,4BAAC,KAAK,EAAE,IAAI,EAAE;AAC9B,UAAI,CAAC,GAAG,KAAK,CAAC;AACd,UAAI,CAAC,GAAG,IAAI,CAAC;AACb,UAAI,UAAU,GAAG,CAAC,CAAC,MAAM,CAAC;;AAE1B,UAAI,UAAU,GAAG,CAAC,IAAI,UAAU,GAAG,CAAC,EAClC,OAAO,KAAK,CAAC;;AAEf,OAAC,GAAG,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AACpB,OAAC,GAAG,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;;AAEpB,UAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,EACjB,OAAO,KAAK,CAAC;;AAEf,UAAI,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,IAAI,EACvB,OAAO,KAAK,CAAC;;AAEf,aAAO,IAAI,CAAC;KACb;;;SA9DkB,UAAU;;;qBAAV,UAAU","file":"creditCard.js","sourcesContent":["import CreditCardList from './creditCardList';\nimport Luhn from './helpers/luhn';\n\nexport default class CreditCard {\n  constructor() {\n    this.creditcardlist = new CreditCardList();\n    this.luhn = new Luhn();\n  }\n\n  getCreditCardList() {\n    return this.creditcardlist.getCreditCardList();\n  }\n\n  validate(number) {\n    return this.luhn.validate(number);\n  }\n\n  getCreditCardNameByNumber(number) {\n    if (!this.validate(number))\n      return false;\n\n    let CREDIT_CARD_LIST = this.getCreditCardList();\n\n    for (let i = 0; i < CREDIT_CARD_LIST.length; i++) {\n      let creditcard = CREDIT_CARD_LIST[i];\n      let regex = new RegExp(creditcard.regexpFull);\n\n      if (regex.test(number))\n        return creditcard.name;\n    }\n\n    return false;\n  }\n\n  validadeSecuryCode(number, code) {\n    let brand = this.getCreditCardNameByNumber(number);\n    let numberLength;\n\n    numberLength = (brand === 'Amex') ? 4 : 3;\n    let regex = new RegExp(`[0-9]{${numberLength}}`);\n\n    if (code.length === numberLength && regex.test(code))\n      return true;\n\n    return false;\n  }\n\n  validadeExpiryDate(month, year) {\n    let m = month;\n    let y = year;\n    let yearLength = y.length;\n\n    if (yearLength < 2 && yearLength > 4)\n      return false;\n\n    m = parseInt(m, 10);\n    y = parseInt(y, 10);\n\n    if (m < 1 || m > 12)\n      return false;\n\n    if (y < 1000 || y >= 3000)\n      return false;\n\n    return true;\n  }\n}\n"]}